from datetime import timedelta

### Set the time after which the admin session expires
# There are two sessions on pagure, login that holds for 31 days and
# the session defined here after which an user has to re-login.
# This session is used when accessing all administrative parts of pagure
# (ie: changing a project's or a user's settings)
ADMIN_SESSION_LIFETIME = timedelta(minutes=20)

### Secret key for the Flask application
SECRET_KEY='{{ pagure_secret_key }}'
SALT_EMAIL='{{ pagure_secret_salt_email }}'

### url to the database server:
#DB_URL=mysql://user:pass@host/db_name
#DB_URL=postgres://user:pass@host/db_name
DB_URL = 'postgresql://{{ pagure_db_user }}:{{ pagure_db_pass }}@{{ pagure_db_host }}/{{ pagure_db_name }}'

### The FAS group in which the admin of pagure are
#ADMIN_GROUP = ['sysadmin-main']

PAGURE_ADMIN_USERS = ['rmarko', 'lkundrak']

### The email address to which the flask.log will send the errors (tracebacks)
EMAIL_ERROR = '{{ pagure_email_error }}'

### Default SMTP server to use for sending emails
SMTP_SERVER = 'localhost'

### Email used to sent emails
FROM_EMAIL = '{{ pagure_from_email }}'
DOMAIN_EMAIL_NOTIFICATIONS = '{{ pagure_domain_email_notifications }}'

### The URL at which the project is available.
APP_URL = '{{ pagure_app_url }}'
DOC_APP_URL = '{{ pagure_doc_app_url }}'

{% if pagure_datagrepper_url %}
### Datagrepper info for the user profile
DATAGREPPER_URL = '{{ pagure_datagrepper_url }}'
DATAGREPPER_CATEGORY = '{{ pagure_datagrepper_category }}'
{% endif %}

### The URL to use to clone git repositories.
GIT_URL_SSH = '{{ pagure_git_url_ssh }}'
GIT_URL_GIT = '{{ pagure_git_url_git }}'

### The IP addresses allowed for the internal endpoints
IP_ALLOWED_INTERNAL = ['127.0.0.1', 'localhost', '::1']

EVENTSOURCE_SOURCE = '{{ pagure_eventsource_source }}'

# Redis configuration
REDIS_HOST = '0.0.0.0'
REDIS_PORT = 6379
REDIS_DB = 0

WEBHOOK = True

### Folder containing to the git repos
GIT_FOLDER = '{{ pagure_datadir }}/repositories'

### Folder containing the forks repos
FORK_FOLDER = '{{ pagure_datadir }}/repositories/forks'

### Folder containing the docs repos
DOCS_FOLDER = '{{ pagure_datadir }}/repositories/docs'

### Folder containing the pull-requests repos
REQUESTS_FOLDER = '{{ pagure_datadir }}/repositories/requests'

### Folder containing the tickets repos
TICKETS_FOLDER = '{{ pagure_datadir }}/repositories/tickets'

### Folder containing the clones of the remotes git repo
REMOTE_GIT_FOLDER = '{{ pagure_datadir }}/remotes'

### Configuration file for gitolite
GITOLITE_CONFIG = '{{ pagure_datadir }}/.gitolite/conf/gitolite.conf'

### Path of the release folder
UPLOAD_FOLDER = 'releases/'
UPLOAD_FOLDER_PATH = '/var/www/' + UPLOAD_FOLDER


### Home folder of the gitolite user
### Folder where to run gl-compile-conf from
GITOLITE_HOME = '{{ pagure_datadir }}/'

### Folder containing all the public ssh keys for gitolite
GITOLITE_KEYDIR = '{{ pagure_datadir }}/.gitolite/keydir/'

### Path to the gitolite.rc file
GL_RC = '{{ pagure_datadir }}/.gitolite.rc'

### Path to the /bin directory where the gitolite tools can be found
GL_BINDIR = '/usr/bin/'

### Temp folder to be used to make the clones to work around bug in libgit2:
## refs: https://github.com/libgit2/libgit2/issues/2965
## and   https://github.com/libgit2/libgit2/issues/2797
TMP_FOLDER = '{{ pagure_datadir }}/tmp'

# Optional configuration

### Number of items displayed per page
# Used when listing items
ITEM_PER_PAGE = 50

### Maximum size of the uploaded content
# Used to limit the size of file attached to a ticket for example
MAX_CONTENT_LENGTH = 4 * 1024 * 1024  # 4 megabytes

### Lenght for short commits ids or file hex
SHORT_LENGTH = 6

### List of blacklisted project names that can conflicts for pagure's URLs
### or other
BLACKLISTED_PROJECTS = [
    'static', 'pv', 'releases', 'new', 'api', 'settings',
    'logout', 'login', 'users', 'groups', 'projects']

DISABLED_PLUGINS = ['IRC']

# Authentication related configuration option

### Switch the authentication method
# Specify which authentication method to use, defaults to `fas` can be or
# `local`
# Default: ``fas``.
PAGURE_AUTH = '{{ pagure_auth }}'

# When this is set to True, the session cookie will only be returned to the
# server via ssl (https). If you connect to the server via plain http, the
# cookie will not be sent. This prevents sniffing of the cookie contents.
# This may be set to False when testing your application but should always
# be set to True in production.
# Default: ``True``.
SESSION_COOKIE_SECURE = True

# The name of the cookie used to store the session id.
# Default: ``.pagure``.
SESSION_COOKIE_NAME = 'pagure'

# Boolean specifying wether to check the user's IP address when retrieving
# its session. This make things more secure (thus is on by default) but
# under certain setup it might not work (for example is there are proxies
# in front of the application).
CHECK_SESSION_IP = True

# Used by SESSION_COOKIE_PATH
APPLICATION_ROOT = '/'

# Set the SSH certs/keys
SSH_KEYS = {
{% for key in pagure_keys %}
    '{{ key.name|upper }}': {
        'fingerprint': '{{ key.fingerprint }}',
        'pubkey': '{{ key.pubkey }}'
    },
{% endfor %}
}
