#
# The MIT License
#
# Copyright (c) 2016, CloudBees, Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
#

PipelineModelDefinition.DisplayName=Pipeline Model Definition

Parser.BuildParameters=Build parameters
Parser.Libraries=Libraries
Parser.Options=Options
Parser.MultipleOfSection=Multiple occurrences of the {0} section
Parser.Triggers=Triggers
Parser.UndefinedSection=Undefined section "{0}"

ModelParser.BareDollarCurly={0} cannot be used as a value directly. Did you mean "{0}"?
ModelParser.BigIntegerValue=BigIntegers cannot be used as constants in Declarative. The maximum value for an integer is 9,223,372,036,854,775,807 and the minimum value for an integer is -9,223,372,036,854,775,808.
ModelParser.CannotHaveBlocks={0} definitions cannot have blocks
ModelParser.DuplicateEnvVar=Duplicate environment variable name: "{0}"
ModelParser.ExpectedAgent=Expected an agent
ModelParser.ExpectedAgentKeyValue=Expected to find \u2018key "value"\u2019
ModelParser.ExpectedBlock=Expected a block
ModelParser.ExpectedBoolean=Expected a boolean with {0}
ModelParser.ExpectedBuildParameter=Expected a build parameter definition
ModelParser.ExpectedClosureOrFailFast=Expected closure or failFast
ModelParser.ExpectedLibrary=Expected a "lib(...)" but got {0}
ModelParser.ExpectedMapMethod=Expected to find \u2018someKey "someValue"\u2019
ModelParser.ExpectedOption=Expected an option
ModelParser.ExpectedNVPairs=Expected name=value pairs
ModelParser.ExpectedStage=Expected a stage
ModelParser.ExpectedStageName=Expected a stage name but did not find any
ModelParser.ExpectedBlockFor=Expected a block for {0}
ModelParser.ExpectedStep=Expected a step
ModelParser.ExpectedStringLiteral=Expected string literal
ModelParser.ExpectedStringLiteralButGot=Expected string literal but got {0}
ModelParser.ExpectedSymbol=Expected a symbol
ModelParser.ExpectedTool=Expected to find \u2018someTool "someVersion"\u2019
ModelParser.ExpectedTrigger=Expected a trigger
ModelParser.ExpectedWhen=Expected a when condition
ModelParser.InvalidAgent=Only "agent none", "agent any" or "agent '{'...}" are allowed.
ModelParser.InvalidBuildCondition=The \u2018post\u2019 section can only contain build condition names with code blocks. Valid condition names are {0}
ModelParser.InvalidEnvironmentIdentifier="{0}" is not a valid environment expression. Use "key = value" pairs with valid Java/shell keys.
ModelParser.InvalidEnvironmentOperation=Environment variable values can only be joined together with \u2018+\u2019s.
ModelParser.InvalidEnvironmentConcatValue=Environment variable values to be concatenated together must be single or double quoted.
ModelParser.InvalidEnvironmentValue=Environment variable values must either be single quoted, double quoted, or function calls.
ModelParser.InvalidInputField=Not a valid field for input: "{0}"
ModelParser.InvalidInternalFunctionArg=Internal function call parameters must be strings.
ModelParser.InvalidSectionDefinition=Not a valid section definition: "{0}". Some extra configuration is required.
ModelParser.InvalidStageSectionDefinition=Not a valid stage section definition: "{0}". Some extra configuration is required.
ModelParser.MapNotAllowed={0} cannot be defined as maps
ModelParser.MethodCallWithClosure=Method call arguments
ModelParser.WrongWhenCount=One condition is required in "when"
ModelParser.NoArgForAgent=No argument for agent
ModelParser.NoArgForAgentKey=No argument for agent key "{0}"
ModelParser.NoArgForField=No argument for field "{0}"
ModelParser.NoArgForMapMethodKey=No argument for map key "{0}"
ModelParser.NoArgForTool=No argument for tool "{0}"
ModelParser.ObjectMethodCall=Method calls on objects not allowed outside "script" blocks.
ModelParser.OneAgentMax=Only one agent type is allowed per agent section
ModelParser.PipelineBlockNotAtTop={0} block must be at the top-level, not within another block.
ModelParser.PipelineStepWithoutBlock=Expected a block with the "{0}" step
ModelParser.RenamedJobProperties=The \u2018jobProperties\u2019 section has been renamed as of version 0.7. Use \u2018properties\u2019 instead.
ModelParser.RenamedNotifications=The \u2018notifications\u2019 section has been removed as of version 0.6. Use \u2018post\u2019 for all post-build actions.
ModelParser.RenamedProperties=The \u2018properties\u2019 section has been renamed as of version 0.8. Use \u2018options\u2019 instead.
ModelParser.RenamedPostBuild=The \u2018postBuild\u2019 section has been renamed as of version 0.6. Use \u2018post\u2019 for all post-build actions.
ModelParser.StageWithoutBlock=Stage does not have a block
ModelParser.StepWithoutBlock={0} step without a block
ModelParser.TooManyArgsForAgentKey=Too many arguments for agent key "{0}"
ModelParser.TooManyArgsForField=Too many arguments for field "{0}"
ModelParser.TooManyArgsForMapMethodKey=Too many arguments for map key "{0}"
ModelParser.TooManyArgsForTool=Too many arguments for tool "{0}"
ModelParser.UnknownStageSection=Unknown stage section "{0}". Starting with version 0.5, steps in a stage must be in a \u2018steps\u2019 block.

JSONParser.InvalidValueType=Invalid value type
JSONParser.InvalidArgumentSyntax=Invalid argument syntax
JSONParser.MethArgsMustBeObj=Individual method or function arguments must be a JSON object
JSONParser.MethArgsMissing=Method or function arguments missing or not an array
JSONParser.MethCallMustBeObj=Method or function call definition must be a JSON object
JSONParser.MissingRequiredProperties=Missing one or more required properties: {0}
JSONParser.ObjNotJSON=Object {0} is neither a JSON array nor a JSON object
JSONParser.TooFewItems=Array has {0} entries, requires minimum of {1}
JSONParser.MissingPipelineRoot=No pipeline block or invalid pipeline block content
JSONParser.InvalidGroovyString={0} is not a valid Groovy string value

ModelValidatorImpl.EmptySection={0} can not be empty
ModelValidatorImpl.DuplicateBuildCondition=Duplicate build condition name: "{0}"
ModelValidatorImpl.InvalidBuildCondition=Invalid condition "{0}" - valid conditions are {1}
ModelValidatorImpl.NoEnvVars=No variables specified for environment
ModelValidatorImpl.NoTools=No tools specified
ModelValidatorImpl.InvalidSectionType=Invalid {0} type "{1}". Valid {0} types: {2}
ModelValidatorImpl.NoToolVersion=Tool type "{0}" does not have an install of "{1}" configured - did you mean "{2}"?
ModelValidatorImpl.EmptyWhen=Empty when closure, remove the property or add some content.
ModelValidatorImpl.BlockedStep=Invalid step "{0}" used - not allowed in this context - {1}
ModelValidatorImpl.InvalidStepParameter=Invalid parameter "{0}", did you mean "{1}"?
ModelValidatorImpl.MissingRequiredStepParameter=Missing required parameter: "{0}"
ModelValidatorImpl.TooManyUnnamedParameters=Arguments to "{0}" must be explicitly named.
ModelValidatorImpl.WrongNumberOfStepParameters="{0}" should have {1} arguments but has {2} arguments instead.
ModelValidatorImpl.NotSingleRequiredParameter=Step does not take a single required parameter - use named parameters instead
ModelValidatorImpl.MixedNamedAndUnnamedParameters=Cannot mix named and unnamed arguments
ModelValidatorImpl.WrongBuildParameterType=Invalid type for parameter "{0}"
ModelValidatorImpl.InvalidParameterType=Expecting "{0}" for parameter "{1}" but got "{2}" of type {3} instead
ModelValidatorImpl.InvalidUnnamedParameterType=Expecting "{0}" but got "{1}" of type {2} instead
ModelValidatorImpl.NoSteps=No steps specified for branch
ModelValidatorImpl.RequiredSection=Missing required section "{0}"
ModelValidatorImpl.NoStageName=Stage does not have a name
ModelValidatorImpl.NothingForStage=Expected one of "steps", "stages", or "parallel" for stage "{0}"
ModelValidatorImpl.NoStages=No stages specified
ModelValidatorImpl.DuplicateParallelName=Duplicate parallel branch name: "{0}"
ModelValidatorImpl.DuplicateStageName=Duplicate stage name: "{0}"
ModelValidatorImpl.DuplicateOptionName=Duplicate option name: "{0}"
ModelValidatorImpl.DuplicateTriggerName=Duplicate trigger name: "{0}"
ModelValidatorImpl.InvalidAgent=Invalid argument for agent - "{0}" - must be map of config options or bare {1}.
ModelValidatorImpl.NoAgentType=No agent type specified. Must be one of {0}
ModelValidatorImpl.InvalidAgentType=Invalid agent type "{0}" specified. Must be one of {1}
ModelValidatorImpl.MissingAgentParameter=Missing required parameter for agent type "{0}": {1}
ModelValidatorImpl.InvalidAgentParameter=Invalid config option "{0}" for agent type "{1}". Valid config options are {2}
ModelValidatorImpl.UnknownWhenConditional=Unknown conditional {0}. Valid conditionals are: {1}
ModelValidatorImpl.MultipleAgentParameters=Multiple parameters are required for agent type "{0}" - {1}. Please use a block instead.
ModelValidatorImpl.InvalidIdentifierInEnv="{0}" is not a valid identifier and cannot be used for an environment variable. Identifiers must start with a letter or underscore and can contain only letters, numbers or underscores.
ModelValidatorImpl.DirSeparatorInDockerfileName=Dockerfile filename cannot contain directory separators.
ModelValidatorImpl.NestedWhenNoArgs=No additional arguments are allowed for children when condition "{0}".
ModelValidatorImpl.NoNestedWhenAllowed=No children when conditions are allowed for when condition "{0}".
ModelValidatorImpl.NestedWhenWithoutChildren=Nested when condition "{0}" requires at least one child condition.
ModelValidatorImpl.NestedWhenWrongChildrenCount=Nested when condition "{0}" requires exactly {1} child condition(s).
ModelValidatorImpl.TwoOfStepsStagesParallel=Only one of "parallel", "stages", or "steps" allowed for stage "{0}"
ModelValidatorImpl.AgentInNestedStages="agent" is not allowed in stage "{0}" as it contains parallel stages
ModelValidatorImpl.ToolsInNestedStages="tools" is not allowed in stage "{0}" as it contains parallel stages
ModelValidatorImpl.NoNestedWithinNestedStages=Parallel stages or branches can only be included in a top-level stage.
ModelValidatorImpl.CompilationErrorInCodeBlock=Groovy compilation error(s) in {0}. Error(s): "{1}"
ModelValidatorImpl.MissingInputMessage=No message specified for input

WhenConditionalValidator.changelog.missingParameter=Changelog is missing required parameter "pattern".
WhenConditionalValidator.changelog.badPattern="{0}" is not a valid regular expression. {1}

ModelInterpreter.NoNodeContext=Attempted to execute a step that requires a node context while \u2018agent none\u2019 was specified. Be sure to specify your own \u2018node '{ ... }'\u2019 blocks when using \u2018agent none\u2019.
ModelInterpreter.EnvironmentVariableFailed=One or more variables have some issues with their values: {0}

Comparator.GLOB.DisplayName=Glob
Comparator.REGEXP.DisplayName=Regular Expression
Comparator.EQUALS.DisplayName=Equals
