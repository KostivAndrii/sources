node{
    def pom = readMavenPom file: 'pom.xml'
    def mvnVersion = pom.version
   stage('SCM Checkout'){
        git branch: 'master', 
	        credentialsId: 'javahometech',
	        url: 'https://github.com/javahometech/myweb'
   }
   stage('Maven Build'){
        def mvnHome = tool name: 'maven3', type: 'maven'
		sh "${mvnHome}/bin/mvn clean package"
		sh 'mv target/myweb*.war target/myweb.war'
   }
   stage('Build Docker Image'){
     sh "docker build -t kammana/myweb:${mvnVersion} ."
   }
   stage('Upload To DockerHub'){
     
      sh "docker login -u kammana -p Cloud@1234"
      sh "docker push kammana/myweb:${mvnVersion}"
   }
   
   stage('Deploy to Dev'){
       sshagent(['tomcat-dev']) {
	   def dockeRm = "ssh ec2-user@172.31.14.131 docker rm -f myweb"
	   def dockeRun = "ssh ec2-user@172.31.14.131 docker run -d -p 80:8080 --name myweb kammana/myweb:${mvnVersion}"
	   sh "${dockeRm}"
	   sh "${dockeRun}"	
	  }
   }
   
   stage('Deploy to Kubernetes'){
	sshagent(['kubernetes-client']) {
	   sh "scp -o StrictHostKeyChecking=no deployments.yml ec2-user@172.31.23.138:/home/ec2-user/"
	   try{
	     sh "ssh ec2-user@172.31.23.138 kubectl create -f /home/ec2-user/deployments.yml"
	   }catch(ex){
	     sh "ssh ec2-user@172.31.23.138 kubectl apply -f /home/ec2-user/deployments.yml"
	   }
	}
   }
}
	
